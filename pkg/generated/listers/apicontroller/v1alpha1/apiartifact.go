/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api-controller/pkg/apis/apicontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiArtifactLister helps list ApiArtifacts.
// All objects returned here must be treated as read-only.
type ApiArtifactLister interface {
	// List lists all ApiArtifacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiArtifact, err error)
	// ApiArtifacts returns an object that can list and get ApiArtifacts.
	ApiArtifacts(namespace string) ApiArtifactNamespaceLister
	ApiArtifactListerExpansion
}

// apiArtifactLister implements the ApiArtifactLister interface.
type apiArtifactLister struct {
	indexer cache.Indexer
}

// NewApiArtifactLister returns a new ApiArtifactLister.
func NewApiArtifactLister(indexer cache.Indexer) ApiArtifactLister {
	return &apiArtifactLister{indexer: indexer}
}

// List lists all ApiArtifacts in the indexer.
func (s *apiArtifactLister) List(selector labels.Selector) (ret []*v1alpha1.ApiArtifact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiArtifact))
	})
	return ret, err
}

// ApiArtifacts returns an object that can list and get ApiArtifacts.
func (s *apiArtifactLister) ApiArtifacts(namespace string) ApiArtifactNamespaceLister {
	return apiArtifactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiArtifactNamespaceLister helps list and get ApiArtifacts.
// All objects returned here must be treated as read-only.
type ApiArtifactNamespaceLister interface {
	// List lists all ApiArtifacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiArtifact, err error)
	// Get retrieves the ApiArtifact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiArtifact, error)
	ApiArtifactNamespaceListerExpansion
}

// apiArtifactNamespaceLister implements the ApiArtifactNamespaceLister
// interface.
type apiArtifactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiArtifacts in the indexer for a given namespace.
func (s apiArtifactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiArtifact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiArtifact))
	})
	return ret, err
}

// Get retrieves the ApiArtifact from the indexer for a given namespace and name.
func (s apiArtifactNamespaceLister) Get(name string) (*v1alpha1.ApiArtifact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiartifact"), name)
	}
	return obj.(*v1alpha1.ApiArtifact), nil
}
