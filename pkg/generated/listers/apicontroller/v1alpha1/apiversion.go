/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api-controller/pkg/apis/apicontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiVersionLister helps list ApiVersions.
// All objects returned here must be treated as read-only.
type ApiVersionLister interface {
	// List lists all ApiVersions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiVersion, err error)
	// ApiVersions returns an object that can list and get ApiVersions.
	ApiVersions(namespace string) ApiVersionNamespaceLister
	ApiVersionListerExpansion
}

// apiVersionLister implements the ApiVersionLister interface.
type apiVersionLister struct {
	indexer cache.Indexer
}

// NewApiVersionLister returns a new ApiVersionLister.
func NewApiVersionLister(indexer cache.Indexer) ApiVersionLister {
	return &apiVersionLister{indexer: indexer}
}

// List lists all ApiVersions in the indexer.
func (s *apiVersionLister) List(selector labels.Selector) (ret []*v1alpha1.ApiVersion, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiVersion))
	})
	return ret, err
}

// ApiVersions returns an object that can list and get ApiVersions.
func (s *apiVersionLister) ApiVersions(namespace string) ApiVersionNamespaceLister {
	return apiVersionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiVersionNamespaceLister helps list and get ApiVersions.
// All objects returned here must be treated as read-only.
type ApiVersionNamespaceLister interface {
	// List lists all ApiVersions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiVersion, err error)
	// Get retrieves the ApiVersion from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiVersion, error)
	ApiVersionNamespaceListerExpansion
}

// apiVersionNamespaceLister implements the ApiVersionNamespaceLister
// interface.
type apiVersionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiVersions in the indexer for a given namespace.
func (s apiVersionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiVersion, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiVersion))
	})
	return ret, err
}

// Get retrieves the ApiVersion from the indexer for a given namespace and name.
func (s apiVersionNamespaceLister) Get(name string) (*v1alpha1.ApiVersion, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apiversion"), name)
	}
	return obj.(*v1alpha1.ApiVersion), nil
}
