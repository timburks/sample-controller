/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api-controller/pkg/apis/apicontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiDeploymentLister helps list ApiDeployments.
// All objects returned here must be treated as read-only.
type ApiDeploymentLister interface {
	// List lists all ApiDeployments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDeployment, err error)
	// ApiDeployments returns an object that can list and get ApiDeployments.
	ApiDeployments(namespace string) ApiDeploymentNamespaceLister
	ApiDeploymentListerExpansion
}

// apiDeploymentLister implements the ApiDeploymentLister interface.
type apiDeploymentLister struct {
	indexer cache.Indexer
}

// NewApiDeploymentLister returns a new ApiDeploymentLister.
func NewApiDeploymentLister(indexer cache.Indexer) ApiDeploymentLister {
	return &apiDeploymentLister{indexer: indexer}
}

// List lists all ApiDeployments in the indexer.
func (s *apiDeploymentLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDeployment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDeployment))
	})
	return ret, err
}

// ApiDeployments returns an object that can list and get ApiDeployments.
func (s *apiDeploymentLister) ApiDeployments(namespace string) ApiDeploymentNamespaceLister {
	return apiDeploymentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiDeploymentNamespaceLister helps list and get ApiDeployments.
// All objects returned here must be treated as read-only.
type ApiDeploymentNamespaceLister interface {
	// List lists all ApiDeployments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDeployment, err error)
	// Get retrieves the ApiDeployment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiDeployment, error)
	ApiDeploymentNamespaceListerExpansion
}

// apiDeploymentNamespaceLister implements the ApiDeploymentNamespaceLister
// interface.
type apiDeploymentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiDeployments in the indexer for a given namespace.
func (s apiDeploymentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDeployment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDeployment))
	})
	return ret, err
}

// Get retrieves the ApiDeployment from the indexer for a given namespace and name.
func (s apiDeploymentNamespaceLister) Get(name string) (*v1alpha1.ApiDeployment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apideployment"), name)
	}
	return obj.(*v1alpha1.ApiDeployment), nil
}
