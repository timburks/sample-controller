/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "k8s.io/api-controller/pkg/apis/apicontroller/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ApiDescriptionLister helps list ApiDescriptions.
// All objects returned here must be treated as read-only.
type ApiDescriptionLister interface {
	// List lists all ApiDescriptions in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDescription, err error)
	// ApiDescriptions returns an object that can list and get ApiDescriptions.
	ApiDescriptions(namespace string) ApiDescriptionNamespaceLister
	ApiDescriptionListerExpansion
}

// apiDescriptionLister implements the ApiDescriptionLister interface.
type apiDescriptionLister struct {
	indexer cache.Indexer
}

// NewApiDescriptionLister returns a new ApiDescriptionLister.
func NewApiDescriptionLister(indexer cache.Indexer) ApiDescriptionLister {
	return &apiDescriptionLister{indexer: indexer}
}

// List lists all ApiDescriptions in the indexer.
func (s *apiDescriptionLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDescription, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDescription))
	})
	return ret, err
}

// ApiDescriptions returns an object that can list and get ApiDescriptions.
func (s *apiDescriptionLister) ApiDescriptions(namespace string) ApiDescriptionNamespaceLister {
	return apiDescriptionNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ApiDescriptionNamespaceLister helps list and get ApiDescriptions.
// All objects returned here must be treated as read-only.
type ApiDescriptionNamespaceLister interface {
	// List lists all ApiDescriptions in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ApiDescription, err error)
	// Get retrieves the ApiDescription from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ApiDescription, error)
	ApiDescriptionNamespaceListerExpansion
}

// apiDescriptionNamespaceLister implements the ApiDescriptionNamespaceLister
// interface.
type apiDescriptionNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ApiDescriptions in the indexer for a given namespace.
func (s apiDescriptionNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ApiDescription, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ApiDescription))
	})
	return ret, err
}

// Get retrieves the ApiDescription from the indexer for a given namespace and name.
func (s apiDescriptionNamespaceLister) Get(name string) (*v1alpha1.ApiDescription, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("apidescription"), name)
	}
	return obj.(*v1alpha1.ApiDescription), nil
}
